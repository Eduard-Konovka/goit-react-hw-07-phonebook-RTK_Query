{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Container/Container.module.css","components/Section/Section.module.css","components/Filter/Filter.module.css","components/Spinner/Spinner.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-selector.js","redux/contacts/contacts-operations.js","components/Container/Container.jsx","components/Section/Section.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/Spinner/Spinner.jsx","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","loading","createReducer","items","_","payload","state","filter","id","error","console","log","combineReducers","store","configureStore","reducer","contacts","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","concat","logger","devTools","process","getLoading","getContacts","getFilter","getVisibleContacts","normalizedFilter","toLowerCase","contact","name","includes","axios","defaults","baseURL","REACT_APP_URL","contactsOperations","fetchContacts","dispatch","get","then","data","catch","addContact","number","post","deleteContact","delete","Container","title","children","className","s","container","Section","section","ContactForm","useState","setName","setNumber","useSelector","useDispatch","hendleChenge","e","target","value","reset","onSubmit","preventDefault","map","alert","form","label","type","pattern","required","onChange","input","btn","Filter","ContactList","list","item","text","onClick","Spinner","size","box","spinner","App","isLoadingContacts","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ceb0f14.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3vA8k\",\"item\":\"ContactList_item__3mzwu\",\"text\":\"ContactList_text__3ZKoM\",\"btn\":\"ContactList_btn__1hhsP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3fSkp\",\"title\":\"Container_title__18drt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__xMFCd\",\"title\":\"Section_title__3QQNp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__3E8L9\",\"input\":\"Filter_input__1i57Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Spinner_box__J1QeX\",\"spinner\":\"Spinner_spinner__t1SPX\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [fetchContactsError]: error => console.log(error),\r\n  [addContactError]: error => console.log(error),\r\n  [deleteContactError]: error => console.log(error),\r\n});\r\n\r\nexport default combineReducers({\r\n  loading,\r\n  items,\r\n  filter,\r\n  error,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({ serializableCheck: false }).concat(logger),\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n","export const getLoading = state => state.contacts.loading;\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_URL;\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\n// Альтернатива fetchContacts на ахинхронных функциях\r\n// const fetchContacts = () => async dispatch => {\r\n//   dispatch(fetchContactsRequest());\r\n\r\n//   try {\r\n//     const { data } = await axios.get('/contacts');\r\n//     dispatch(fetchContactsSuccess(data));\r\n//   } catch (error) {\r\n//     dispatch(fetchContactsError(error));\r\n//   }\r\n// };\r\n\r\nconst addContact =\r\n  ({ name, number }) =>\r\n  dispatch => {\r\n    const contact = {\r\n      name,\r\n      number,\r\n    };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n      .post('/contacts', contact)\r\n      .then(({ data }) => dispatch(addContactSuccess(data)))\r\n      .catch(error => dispatch(addContactError(error)));\r\n  };\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nconst contactsOperations = {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n};\r\nexport default contactsOperations;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Container.module.css';\r\n\r\nexport default function Container({ title, children }) {\r\n  return (\r\n    <div className={s.container}>\r\n      {title && <h1 className={s.title}>{title}</h1>}\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nContainer.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <section className={s.section}>\r\n      {title && <h2 className={s.title}>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getContacts } from 'redux/contacts/contacts-selector';\r\nimport contactsOperations from 'redux/contacts/contacts-operations';\r\nimport s from './ContactForm.module.css';\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const hendleChenge = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const hendleSubmite = e => {\r\n    e.preventDefault();\r\n\r\n    contacts.map(contact => contact.name).includes(name)\r\n      ? alert(`${name} is already in contacts.`)\r\n      : dispatch(contactsOperations.addContact({ name, number }));\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={hendleSubmite} className={s.form}>\r\n      <label className={s.label}>\r\n        <p className={s.title}>Name</p>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={hendleChenge}\r\n          className={s.input}\r\n        />\r\n\r\n        <p className={s.title}>Number</p>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={hendleChenge}\r\n          className={s.input}\r\n        />\r\n\r\n        <button className={s.btn}>Add contact</button>\r\n      </label>\r\n    </form>\r\n  );\r\n}\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from 'redux/contacts/contacts-selector';\r\nimport { changeFilter } from 'redux/contacts/contacts-actions';\r\nimport s from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={s.filter}>\r\n      Find contacts by name:\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        className={s.input}\r\n        onChange={e => dispatch(changeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { getVisibleContacts } from 'redux/contacts/contacts-selector';\r\nimport contactsOperations from 'redux/contacts/contacts-operations';\r\nimport s from './ContactList.module.css';\r\n\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const forDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(contact => (\r\n        <li key={contact.id} className={s.item}>\r\n          <p className={s.text}>{`${contact.name}: ${contact.number}`}</p>\r\n          <button\r\n            type=\"button\"\r\n            className={s.btn}\r\n            onClick={() => forDeleteContact(contact.id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import { ImSpinner } from 'react-icons/im';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Spinner.module.css';\r\n\r\nexport default function Spinner({ size }) {\r\n  return (\r\n    <div className={s.box}>\r\n      <ImSpinner size={size} className={s.spinner} />\r\n    </div>\r\n  );\r\n}\r\n\r\nSpinner.propTypes = {\r\n  size: PropTypes.number.isRequired,\r\n};\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getLoading } from 'redux/contacts/contacts-selector';\r\nimport contactsOperations from 'redux/contacts/contacts-operations';\r\nimport Container from 'components/Container/Container';\r\nimport Section from 'components/Section/Section';\r\nimport ContactForm from 'components/ContactForm/ContactForm';\r\nimport Filter from 'components/Filter/Filter';\r\nimport ContactList from 'components/ContactList/ContactList';\r\nimport Spinner from 'components/Spinner/Spinner';\r\nimport 'App.css';\r\n\r\nexport default function App() {\r\n  const dispatch = useDispatch();\r\n  const isLoadingContacts = useSelector(getLoading);\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Container title=\"Phonebook\">\r\n      <Section>\r\n        <ContactForm />\r\n      </Section>\r\n\r\n      {isLoadingContacts && <Spinner size={100} />}\r\n\r\n      {!isLoadingContacts && (\r\n        <Section title=\"Contacts\">\r\n          <Filter />\r\n          <ContactList />\r\n        </Section>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from 'redux/store';\r\nimport App from 'App';\r\nimport 'index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2cqbM\",\"label\":\"ContactForm_label__1M-ky\",\"title\":\"ContactForm_title__16NJE\",\"input\":\"ContactForm_input__10uh3\",\"btn\":\"ContactForm_btn__1vXnp\"};"],"sourceRoot":""}